# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
from aiogram import Router, F, types
from services.auth_service import AuthService
from keyboards.user_keyboards import get_main_menu_keyboard, get_back_to_main_inline_keyboard

# –†–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
command_router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@command_router.message(F.text == "/start")
async def start_command(message: types.Message):
    welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TGShop!</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é
‚Ä¢ üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑
‚Ä¢ ‚ùì –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    """
    await message.answer(welcome_text, reply_markup=get_main_menu_keyboard(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
@command_router.message(F.text == "/help")
@command_router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    help_text = """
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É TGShop</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
/menu - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é
/cart - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É

<b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üìã –ú–µ–Ω—é"
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑

<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>
/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    """
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@command_router.message(F.text == "/admin")
async def admin_command(message: types.Message):
    user = AuthService(message.from_user.id)
    is_admin = await user.isAdmin()

    print(f"User ID: {message.from_user.id}")
    print(f"Is admin: {is_admin}")

    if is_admin:
        from keyboards.admin_keyboards import get_admin_main_keyboard
        await message.answer("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=get_admin_main_keyboard(), parse_mode="HTML")
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@command_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=get_main_menu_keyboard(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@command_router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=get_back_to_main_inline_keyboard(), parse_mode="HTML")
    await callback.answer()
