# –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from aiogram import Router, F, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards.admin_keyboards import *
from data.database import get_db
from services.auth_service import AuthService
from services.category_services import (
    CategoryGetService, CategoryAddService, CategoryEditService, CategoryDeleteService
)
from services.item_services import (
    ItemGetService, ItemAddService, ItemEditService, ItemDeleteService
)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
admin_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
class AdminStates(StatesGroup):
    waiting_for_category_name = State()
    waiting_for_category_key = State()
    waiting_for_item_name = State()
    waiting_for_item_description = State()
    waiting_for_item_price = State()
    waiting_for_item_category = State()
    waiting_for_edit_field = State()
    waiting_for_edit_value = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@admin_router.message(F.text == "/admin")
async def admin_start(message: types.Message):
    user = AuthService(message.from_user.id)
    if await user.isAdmin():
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_main_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é"
@admin_router.message(F.text == "üçΩÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é")
async def menu_management(message: types.Message):
    user = AuthService(message.from_user.id)
    if await user.isAdmin():
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑—ã"
@admin_router.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã")
async def orders_management(message: types.Message):
    user = AuthService(message.from_user.id)
    if await user.isAdmin():
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:", reply_markup=get_orders_management_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data == "add_category")
async def add_category_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):")
    await state.set_state(AdminStates.waiting_for_category_key)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.message(AdminStates.waiting_for_category_key)
async def add_category_key_received(message: types.Message, state: FSMContext):
    await state.update_data(category_key=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AdminStates.waiting_for_category_name)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
@admin_router.message(AdminStates.waiting_for_category_name)
async def add_category_name_received(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    category_key = user_data['category_key']
    category_name = message.text

    db_gen = get_db()
    db = next(db_gen)

    try:
        category_add_service = CategoryAddService(db)
        category = category_add_service.add_category(category_key, category_name)
        if category:
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
    finally:
        db.close()

    await state.clear()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())


# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.callback_query(F.data == "add_item")
async def add_item_start(callback: types.CallbackQuery, state: FSMContext):
    db_gen = get_db()
    db = next(db_gen)
    category_get_service = CategoryGetService(db)
    categories = category_get_service.get_all_categories()
    db.close()

    if not categories:
        await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        return

    category_buttons = []
    for category in categories:
        category_buttons.append([types.InlineKeyboardButton(text=category.name, callback_data=f"select_category_{category.id}")])
    category_buttons.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_management")])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=category_buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_item_category)


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
@admin_router.callback_query(F.data.startswith("select_category_"))
async def category_selected(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[2])
    await state.update_data(item_category_id=category_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_for_item_name)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.message(AdminStates.waiting_for_item_name)
async def item_name_received(message: types.Message, state: FSMContext):
    await state.update_data(item_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_for_item_description)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.message(AdminStates.waiting_for_item_description)
async def item_description_received(message: types.Message, state: FSMContext):
    await state.update_data(item_description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_for_item_price)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
@admin_router.message(AdminStates.waiting_for_item_price)
async def item_price_received(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50):")
        return

    user_data = await state.get_data()
    category_id = user_data['item_category_id']
    name = user_data['item_name']
    description = user_data['item_description']

    db_gen = get_db()
    db = next(db_gen)

    try:
        item_add_service = ItemAddService(db)
        item = item_add_service.add_item(name, description, price, category_id)
        if item:
            await message.answer(f"–¢–æ–≤–∞—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
    finally:
        db.close()

    await state.clear()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî –í–´–ë–û–† –ö–ê–¢–ï–ì–û–†–ò–ò
@admin_router.callback_query(F.data == "edit_categories")
async def edit_categories(callback: types.CallbackQuery):
    db_gen = get_db()
    db = next(db_gen)
    category_get_service = CategoryGetService(db)
    categories = category_get_service.get_all_categories()
    db.close()

    if not categories:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    keyboard = get_categories_keyboard(categories)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî –í–´–ë–û–† –¢–û–í–ê–†–ê
@admin_router.callback_query(F.data == "edit_items")
async def edit_items(callback: types.CallbackQuery):
    db_gen = get_db()
    db = next(db_gen)
    item_get_service = ItemGetService(db)
    items = item_get_service.get_all_items()
    db.close()

    if not items:
        await callback.message.edit_text("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    keyboard = get_items_keyboard(items)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)


@admin_router.callback_query(F.data.startswith("edit_category_"))
async def edit_category_start(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[2])
    await state.update_data(editing_category_id=category_id, editing_target="category")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_categories")],
        ]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_edit_field)


@admin_router.callback_query(F.data.startswith("edit_item_"))
async def edit_item_start(callback: types.CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split("_")[2])
    await state.update_data(editing_item_id=item_id, editing_target="item")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name")],
            [types.InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")],
            [types.InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_items")],
        ]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_edit_field)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏ —Ç–æ–≤–∞—Ä–∞)
@admin_router.callback_query(AdminStates.waiting_for_edit_field)
async def edit_field_selected(callback: types.CallbackQuery, state: FSMContext):
    field_map = {
        "edit_field_name": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", AdminStates.waiting_for_edit_value, "name"),
        "edit_field_description": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", AdminStates.waiting_for_edit_value, "description"),
        "edit_field_price": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:", AdminStates.waiting_for_edit_value, "price"),
    }

    if callback.data not in field_map:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        return

    prompt, next_state, field_name = field_map[callback.data]
    await state.update_data(editing_field=field_name)
    await callback.message.edit_text(prompt)
    await state.set_state(next_state)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
@admin_router.message(AdminStates.waiting_for_edit_value)
async def edit_value_received(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    target = user_data.get('editing_target')
    field = user_data['editing_field']
    new_value = message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
    if field == "price":
        try:
            new_value = float(new_value.replace(',', '.'))
            if new_value <= 0:
                raise ValueError
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50):")
            return

    db_gen = get_db()
    db = next(db_gen)

    try:
        if target == "category":
            category_id = user_data['editing_category_id']
            category_edit_service = CategoryEditService(db)
            if field == "name":
                obj = category_edit_service.update_category(category_id, name=new_value)
            else:
                await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                return

        elif target == "item":
            item_id = user_data['editing_item_id']
            item_edit_service = ItemEditService(db)
            if field == "name":
                obj = item_edit_service.update_item_name(item_id, new_value)
            elif field == "description":
                obj = item_edit_service.update_item_description(item_id, new_value)
            elif field == "price":
                obj = item_edit_service.update_item_price(item_id, new_value)
            else:
                await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞")
                return

        if obj:
            if field == "price":
                await message.answer(f"–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_value:.2f}")
            else:
                await message.answer(f"–ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {target}")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()

    await state.clear()

    # –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if target == "category":
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())
    else:
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_router.callback_query(F.data.startswith("delete_category_"))
async def delete_category_confirm(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[2])
    db_gen = get_db()
    db = next(db_gen)
    category_get_service = CategoryGetService(db)
    category = category_get_service.get_category(category_id)
    db.close()

    if category:
        confirm_keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_category_{category_id}")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_categories")]
            ]
        )
        await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category.name}'? –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.", reply_markup=confirm_keyboard)
    else:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
@admin_router.callback_query(F.data.startswith("confirm_delete_category_"))
async def delete_category_confirmed(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[3])

    db_gen = get_db()
    db = next(db_gen)

    try:
        category_delete_service = CategoryDeleteService(db)
        success = category_delete_service.delete_category(category_id)
        if success:
            await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()

    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.callback_query(F.data.startswith("delete_item_"))
async def delete_item_confirm(callback: types.CallbackQuery):
    item_id = int(callback.data.split("_")[2])
    db_gen = get_db()
    db = next(db_gen)
    item_get_service = ItemGetService(db)
    item = item_get_service.get_item(item_id)
    db.close()

    if item:
        confirm_keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_item_{item_id}")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_items")]
            ]
        )
        await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{item.name}'?", reply_markup=confirm_keyboard)
    else:
        await callback.message.edit_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î
@admin_router.callback_query(F.data.startswith("confirm_delete_item_"))
async def delete_item_confirmed(callback: types.CallbackQuery):
    item_id = int(callback.data.split("_")[3])

    db_gen = get_db()
    db = next(db_gen)

    try:
        item_delete_service = ItemDeleteService(db)
        success = item_delete_service.delete_item(item_id)
        if success:
            await callback.message.edit_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()

    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())


# –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@admin_router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    from keyboards.admin_keyboards import get_admin_back_inline_keyboard
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_back_inline_keyboard())
    await callback.answer()
