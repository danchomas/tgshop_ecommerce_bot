from aiogram import Router, F, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards.admin_keyboards import *
from data.database import get_db
from services.auth_service import AuthService
from services.category_services import (
    CategoryGetService, CategoryAddService, CategoryEditService, CategoryDeleteService
)
from services.item_services import (
    ItemGetService, ItemAddService, ItemEditService, ItemDeleteService
)

admin_router = Router()

class AdminStates(StatesGroup):
    waiting_for_category_name = State()
    waiting_for_category_key = State()
    waiting_for_item_name = State()
    waiting_for_item_description = State()
    waiting_for_item_price = State()
    waiting_for_item_category = State()
    waiting_for_edit_category_name = State()
    waiting_for_edit_item_name = State()
    waiting_for_edit_item_description = State()
    waiting_for_edit_item_price = State()

@admin_router.message(F.text == "/admin")
async def admin_start(message: types.Message):
    user = AuthService(message.from_user.id)
    if await user.isAdmin():
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_main_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

@admin_router.message(F.text == "üçΩÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é")
async def menu_management(message: types.Message):
    user = AuthService(message.from_user.id)
    if await user.isAdmin():
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@admin_router.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã")
async def orders_management(message: types.Message):
    user = AuthService(message.from_user.id)
    if await user.isAdmin():
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:", reply_markup=get_orders_management_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@admin_router.callback_query(F.data == "add_category")
async def add_category_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):")
    await state.set_state(AdminStates.waiting_for_category_key)

@admin_router.message(AdminStates.waiting_for_category_key)
async def add_category_key_received(message: types.Message, state: FSMContext):
    await state.update_data(category_key=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AdminStates.waiting_for_category_name)

@admin_router.message(AdminStates.waiting_for_category_name)
async def add_category_name_received(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    category_key = user_data['category_key']
    category_name = message.text

    db_gen = get_db()
    db = next(db_gen)

    try:
        category_add_service = CategoryAddService(db)
        category = category_add_service.add_category(category_key, category_name)
        if category:
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
    finally:
        db.close()

    await state.clear()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())

@admin_router.callback_query(F.data == "add_item")
async def add_item_start(callback: types.CallbackQuery, state: FSMContext):
    db_gen = get_db()
    db = next(db_gen)
    category_get_service = CategoryGetService(db)
    categories = category_get_service.get_all_categories()
    db.close()

    if not categories:
        await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    category_buttons = []
    for category in categories:
        category_buttons.append([types.InlineKeyboardButton(text=category.name, callback_data=f"select_category_{category.id}")])
    category_buttons.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_management")])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=category_buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_item_category)

@admin_router.callback_query(F.data.startswith("select_category_"))
async def category_selected(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[2])
    await state.update_data(item_category_id=category_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_for_item_name)

@admin_router.message(AdminStates.waiting_for_item_name)
async def item_name_received(message: types.Message, state: FSMContext):
    await state.update_data(item_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_for_item_description)

@admin_router.message(AdminStates.waiting_for_item_description)
async def item_description_received(message: types.Message, state: FSMContext):
    await state.update_data(item_description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_for_item_price)

@admin_router.message(AdminStates.waiting_for_item_price)
async def item_price_received(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50):")
        return

    user_data = await state.get_data()
    category_id = user_data['item_category_id']
    name = user_data['item_name']
    description = user_data['item_description']

    db_gen = get_db()
    db = next(db_gen)

    try:
        item_add_service = ItemAddService(db)
        item = item_add_service.add_item(name, description, price, category_id)
        if item:
            await message.answer(f"–¢–æ–≤–∞—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
    finally:
        db.close()

    await state.clear()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())

@admin_router.callback_query(F.data == "edit_categories")
async def edit_categories(callback: types.CallbackQuery):
    db_gen = get_db()
    db = next(db_gen)
    category_get_service = CategoryGetService(db)
    categories = category_get_service.get_all_categories()
    db.close()

    if not categories:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    keyboard = get_categories_keyboard(categories)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@admin_router.callback_query(F.data == "edit_items")
async def edit_items(callback: types.CallbackQuery):
    db_gen = get_db()
    db = next(db_gen)
    item_get_service = ItemGetService(db)
    items = item_get_service.get_all_items()
    db.close()

    if not items:
        await callback.message.edit_text("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    keyboard = get_items_keyboard(items)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@admin_router.callback_query(F.data.startswith("edit_category_"))
async def edit_category(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[2])
    keyboard = get_category_edit_keyboard(category_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@admin_router.callback_query(F.data.startswith("edit_category_name_"))
async def edit_category_name_start(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[3])
    await state.update_data(editing_category_id=category_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AdminStates.waiting_for_edit_category_name)

@admin_router.message(AdminStates.waiting_for_edit_category_name)
async def edit_category_name_received(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    category_id = user_data['editing_category_id']
    new_name = message.text

    db_gen = get_db()
    db = next(db_gen)

    try:
        category_edit_service = CategoryEditService(db)
        category = category_edit_service.update_category(category_id, name=new_name)
        if category:
            await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()

    await state.clear()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())

@admin_router.callback_query(F.data.startswith("delete_category_"))
async def delete_category_confirm(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[2])
    db_gen = get_db()
    db = next(db_gen)
    category_get_service = CategoryGetService(db)
    category = category_get_service.get_category(category_id)
    db.close()

    if category:
        confirm_keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_category_{category_id}")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_categories")]
            ]
        )
        await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category.name}'? –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.", reply_markup=confirm_keyboard)
    else:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

@admin_router.callback_query(F.data.startswith("confirm_delete_category_"))
async def delete_category_confirmed(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[3])

    db_gen = get_db()
    db = next(db_gen)

    try:
        category_delete_service = CategoryDeleteService(db)
        success = category_delete_service.delete_category(category_id)
        if success:
            await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()

    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())

@admin_router.callback_query(F.data.startswith("edit_item_"))
async def edit_item(callback: types.CallbackQuery):
    item_id = int(callback.data.split("_")[2])
    keyboard = get_item_edit_keyboard(item_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@admin_router.callback_query(F.data.startswith("edit_item_name_"))
async def edit_item_name_start(callback: types.CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split("_")[3])
    await state.update_data(editing_item_id=item_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_for_edit_item_name)

@admin_router.message(AdminStates.waiting_for_edit_item_name)
async def edit_item_name_received(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    item_id = user_data['editing_item_id']
    new_name = message.text

    db_gen = get_db()
    db = next(db_gen)

    try:
        item_edit_service = ItemEditService(db)
        item = item_edit_service.update_item_name(item_id, new_name)
        if item:
            await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()

    await state.clear()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())

@admin_router.callback_query(F.data.startswith("edit_item_desc_"))
async def edit_item_desc_start(callback: types.CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split("_")[3])
    await state.update_data(editing_item_id=item_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_for_edit_item_description)

@admin_router.message(AdminStates.waiting_for_edit_item_description)
async def edit_item_desc_received(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    item_id = user_data['editing_item_id']
    new_description = message.text

    db_gen = get_db()
    db = next(db_gen)

    try:
        item_edit_service = ItemEditService(db)
        item = item_edit_service.update_item_description(item_id, new_description)
        if item:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()

    await state.clear()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())

@admin_router.callback_query(F.data.startswith("edit_item_price_"))
async def edit_item_price_start(callback: types.CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split("_")[3])
    await state.update_data(editing_item_id=item_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_for_edit_item_price)

@admin_router.message(AdminStates.waiting_for_edit_item_price)
async def edit_item_price_received(message: types.Message, state: FSMContext):
    try:
        new_price = float(message.text.replace(',', '.'))
        if new_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50):")
        return

    user_data = await state.get_data()
    item_id = user_data['editing_item_id']

    db_gen = get_db()
    db = next(db_gen)

    try:
        item_edit_service = ItemEditService(db)
        item = item_edit_service.update_item_price(item_id, new_price)
        if item:
            await message.answer(f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price:.2f}")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()

    await state.clear()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())

@admin_router.callback_query(F.data.startswith("delete_item_"))
async def delete_item_confirm(callback: types.CallbackQuery):
    item_id = int(callback.data.split("_")[2])
    db_gen = get_db()
    db = next(db_gen)
    item_get_service = ItemGetService(db)
    item = item_get_service.get_item(item_id)
    db.close()

    if item:
        confirm_keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_item_{item_id}")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_items")]
            ]
        )
        await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{item.name}'?", reply_markup=confirm_keyboard)
    else:
        await callback.message.edit_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@admin_router.callback_query(F.data.startswith("confirm_delete_item_"))
async def delete_item_confirmed(callback: types.CallbackQuery):
    item_id = int(callback.data.split("_")[3])

    db_gen = get_db()
    db = next(db_gen)

    try:
        item_delete_service = ItemDeleteService(db)
        success = item_delete_service.delete_item(item_id)
        if success:
            await callback.message.edit_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()

    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=get_menu_management_keyboard())

@admin_router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_main_keyboard())
