from aiogram import Router, F, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from services.cart_service import CartService
from keyboards.cart_keyboards import *
from data.database import get_db
from services.item_services import ItemGetService

cart_router = Router()
cart_service = CartService()

class CartStates(StatesGroup):
    waiting_for_order_confirmation = State()

@cart_router.callback_query(F.data == "view_cart")
async def view_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart_items = cart_service.get_cart_items(user_id)
    total = cart_service.get_cart_total(user_id)

    if not cart_items:
        await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return

    cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    for item, quantity in cart_items:
        cart_text += f"‚Ä¢ {item.name} x{quantity} - {item.price * quantity:.2f} —Ä—É–±.\n"

    cart_text += f"\n<b>–ò—Ç–æ–≥–æ: {total:.2f} —Ä—É–±.</b>"

    await callback.message.edit_text(cart_text, reply_markup=get_cart_keyboard(), parse_mode="HTML")

@cart_router.callback_query(F.data == "checkout")
async def checkout_start(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart_items = cart_service.get_cart_items(user_id)
    total = cart_service.get_cart_total(user_id)

    if not cart_items:
        await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return

    order_text = "üì¶ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
    for item, quantity in cart_items:
        order_text += f"‚Ä¢ {item.name} x{quantity} - {item.price * quantity:.2f} —Ä—É–±.\n"

    order_text += f"\n<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total:.2f} —Ä—É–±.</b>"
    order_text += "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑?"

    await callback.message.edit_text(order_text, reply_markup=get_checkout_keyboard(), parse_mode="HTML")
    await state.set_state(CartStates.waiting_for_order_confirmation)

@cart_router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart_items = cart_service.get_cart_items(user_id)
    total = cart_service.get_cart_total(user_id)

    if not cart_items:
        await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –∏ —Ç.–¥.

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart_service.clear_cart(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # await notify_admin_about_order(callback.from_user, cart_items, total)

    await callback.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    await state.clear()

@cart_router.callback_query(F.data == "cancel_order_process")
async def cancel_order_process(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>", reply_markup=get_cart_keyboard(), parse_mode="HTML")
    await state.clear()

@cart_router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart_service.clear_cart(user_id)
    await callback.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")

@cart_router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: types.CallbackQuery):
    item_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –≤–∞—à —Å–µ—Ä–≤–∏—Å
    db_gen = get_db()
    db = next(db_gen)
    item_get_service = ItemGetService(db)
    item = item_get_service.get_item(item_id)
    db.close()

    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    success = cart_service.add_to_cart(user_id, item_id)

    if success:
        await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!")

@cart_router.callback_query(F.data.startswith("increase_"))
async def increase_quantity(callback: types.CallbackQuery):
    item_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    cart = cart_service.get_cart(user_id)
    if item_id in cart:
        cart[item_id]["quantity"] += 1
        quantity = cart[item_id]["quantity"]
        await callback.message.edit_reply_markup(reply_markup=get_item_quantity_keyboard(item_id, quantity))
    await callback.answer()

@cart_router.callback_query(F.data.startswith("decrease_"))
async def decrease_quantity(callback: types.CallbackQuery):
    item_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    cart = cart_service.get_cart(user_id)
    if item_id in cart and cart[item_id]["quantity"] > 1:
        cart[item_id]["quantity"] -= 1
        quantity = cart[item_id]["quantity"]
        await callback.message.edit_reply_markup(reply_markup=get_item_quantity_keyboard(item_id, quantity))
    await callback.answer()

@cart_router.callback_query(F.data.startswith("remove_"))
async def remove_from_cart(callback: types.CallbackQuery):
    item_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    cart_service.remove_from_cart(user_id, item_id)
    await callback.message.edit_text("üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>", reply_markup=get_cart_keyboard(), parse_mode="HTML")
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")
