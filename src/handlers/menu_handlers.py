from aiogram import Router, F, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from data.database import get_db
from services.category_services import CategoryGetService
from services.item_services import ItemGetService
from keyboards.user_keyboards import get_back_to_main_keyboard
import logging

menu_router = Router()

class MenuStates(StatesGroup):
    viewing_category = State()

@menu_router.message(F.text == "üìã –ú–µ–Ω—é")
@menu_router.message(F.text == "/menu")
async def show_menu(message: types.Message):
    db_gen = get_db()
    db = next(db_gen)
    category_get_service = CategoryGetService(db)
    categories = category_get_service.get_all_categories()
    db.close()

    if not categories:
        await message.answer("üìã –ú–µ–Ω—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ.", reply_markup=get_back_to_main_keyboard())
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    category_buttons = []
    for category in categories:
        category_buttons.append([types.KeyboardButton(text=category.name)])

    category_buttons.append([types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=category_buttons,
        resize_keyboard=True
    )

    await message.answer("üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", reply_markup=keyboard)

@menu_router.message(F.text.regexp(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9\s\-_]+$'))  # –õ—é–±–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
async def show_category_items(message: types.Message):
    category_name = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ª—É–∂–µ–±–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    if category_name in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üìã –ú–µ–Ω—é", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "‚ùì –ü–æ–º–æ—â—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üçΩÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", "üì¶ –ó–∞–∫–∞–∑—ã"]:
        return

    db_gen = get_db()
    db = next(db_gen)
    category_get_service = CategoryGetService(db)
    item_get_service = ItemGetService(db)

    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏
    categories = category_get_service.get_all_categories()
    category = None
    for cat in categories:
        if cat.name == category_name:
            category = cat
            break

    if not category:
        db.close()
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_back_to_main_keyboard())
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    items = item_get_service.get_items_by_category(category.id)
    db.close()

    if not items:
        await message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b> –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=get_back_to_main_keyboard())
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    items_text = f"üçΩÔ∏è <b>{category_name}</b>\n\n"
    item_buttons = []

    for item in items:
        items_text += f"<b>{item.name}</b> - {item.price:.2f} —Ä—É–±.\n"
        items_text += f"{item.description}\n\n"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        item_buttons.append([types.InlineKeyboardButton(
            text=f"üõí {item.name} - {item.price:.2f} —Ä—É–±.",
            callback_data=f"add_to_cart_{item.id}"
        )])

    item_buttons.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=item_buttons)

    await message.answer(items_text, reply_markup=keyboard)

@menu_router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: types.CallbackQuery):
    try:
        item_id = int(callback.data.split("_")[3])
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        db_gen = get_db()
        db = next(db_gen)
        item_get_service = ItemGetService(db)
        item = item_get_service.get_item(item_id)
        db.close()

        if not item:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ CartService —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
        from services.cart_service import CartService
        cart_service = CartService()
        success = cart_service.add_to_cart(user_id, item_id)

        if success:
            await callback.answer(f"–¢–æ–≤–∞—Ä '{item.name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

@menu_router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery):
    await show_menu(callback.message)
    await callback.answer()
